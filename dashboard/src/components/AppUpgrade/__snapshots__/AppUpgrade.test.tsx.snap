// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loading spinner matches the snapshot 1`] = `
<LoadingWrapper
  loaded={false}
  type={0}
/>
`;

exports[`renders the repo selection form if not introduced 1`] = `
<div>
  <SelectRepoForm
    app={
      Object {
        "chart": Object {
          "metadata": Object {
            "name": "bar",
            "version": "1.0.0",
          },
        },
        "name": "foo",
      }
    }
    chartName="bar"
    checkChart={[Function]}
    clearRepo={[Function]}
    fetchChartVersions={[Function]}
    fetchRepositories={[Function]}
    getAppWithUpdateInfo={[Function]}
    getChartValues={[Function]}
    getChartVersion={[Function]}
    goBack={[Function]}
    isFetching={false}
    kubeappsNamespace="kubeapps"
    namespace="default"
    push={[Function]}
    releaseName="foo"
    repo={Object {}}
    repos={
      Array [
        Object {
          "metadata": Object {
            "name": "stable",
          },
        },
      ]
    }
    selected={Object {}}
    upgradeApp={[Function]}
    version="1.0.0"
  />
</div>
`;

exports[`renders the upgrade form when the repo is available 1`] = `
<div>
  <UpgradeForm
    app={
      Object {
        "chart": Object {
          "metadata": Object {
            "name": "bar",
            "version": "1.0.0",
          },
        },
        "name": "foo",
      }
    }
    appCurrentValues=""
    appCurrentVersion="1.0.0"
    chartName="bar"
    checkChart={[Function]}
    clearRepo={[Function]}
    fetchChartVersions={[Function]}
    fetchRepositories={[Function]}
    getAppWithUpdateInfo={[Function]}
    getChartValues={[Function]}
    getChartVersion={[Function]}
    goBack={[Function]}
    isFetching={false}
    kubeappsNamespace="kubeapps"
    namespace="default"
    push={[Function]}
    releaseName="foo"
    repo="stable"
    repos={
      Array [
        Object {
          "metadata": Object {
            "name": "stable",
          },
        },
      ]
    }
    selected={Object {}}
    upgradeApp={[Function]}
    version="1.0.0"
  />
</div>
`;

exports[`skips the repo selection form if the app contains upgrade info 1`] = `
<div>
  <UpgradeForm
    app={
      Object {
        "chart": Object {
          "metadata": Object {
            "name": "bar",
            "version": "1.0.0",
          },
        },
        "name": "foo",
        "updateInfo": Object {
          "appLatestVersion": "1.1.0",
          "chartLatestVersion": "1.1.0",
          "repository": Object {
            "name": "stable",
            "url": "",
          },
          "upToDate": true,
        },
      }
    }
    appCurrentValues=""
    appCurrentVersion="1.0.0"
    chartName="bar"
    checkChart={[Function]}
    clearRepo={[Function]}
    fetchChartVersions={[Function]}
    fetchRepositories={[Function]}
    getAppWithUpdateInfo={[Function]}
    getChartValues={[Function]}
    getChartVersion={[Function]}
    goBack={[Function]}
    isFetching={false}
    kubeappsNamespace="kubeapps"
    namespace="default"
    push={[Function]}
    releaseName="foo"
    repo="stable"
    repos={
      Array [
        Object {
          "metadata": Object {
            "name": "stable",
          },
        },
      ]
    }
    selected={Object {}}
    upgradeApp={[Function]}
    version="1.0.0"
  />
</div>
`;

exports[`when an error exists renders a generic error message 1`] = `
<ErrorSelector
  action="update"
  defaultRequiredRBACRoles={
    Object {
      "update": Array [
        Object {
          "apiGroup": "kubeapps.com",
          "namespace": "kubeapps",
          "resource": "apprepositories",
          "verbs": Array [
            "get",
          ],
        },
      ],
    }
  }
  error={[Error: foo doesn't exists]}
  namespace="default"
  resource="foo"
/>
`;
